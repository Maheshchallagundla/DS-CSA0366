#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

struct Node* insert(struct Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }

    if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    }

    return root;
}

void inorderTraversal(struct Node* root, int* array, int* index) {
    if (root != NULL) {
        inorderTraversal(root->left, array, index);
        array[(*index)++] = root->data;
        inorderTraversal(root->right, array, index);
    }
}

int minEdgesToNode(struct Node* root, int target) {
    int array[100];
	  int index = 0;
    inorderTraversal(root, array, &index);

    int minEdges = 0;
    for (int i = 0; i < index; i++) {
        if (array[i] == target) {
            minEdges = i;
            break;
        }
    }

    return minEdges;
}

int main() {
    struct Node* root = NULL;
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);

    int targetNode = 60;
    int minEdges = minEdgesToNode(root, targetNode);

    printf("Minimum edges to reach node %d: %d\n", targetNode, minEdges);

    return 0;
}
